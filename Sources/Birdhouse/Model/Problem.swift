import HTTPTypes
import Hummingbird

/// Represents detailed information about a problem encountered in an HTTP API, following the
/// Problem Details for HTTP APIs specification (RFC 7807).
struct Problem: Error, HTTPResponseError, Sendable {

    /// A URI reference [RFC3986] that identifies the problem type.
    ///
    /// This specification encourages that, when dereferenced, it provide human-readable
    /// documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).
    /// When this member is not present, its value is assumed to be "about:blank".
    let type: String?

    /// A short, human-readable summary of the problem type.
    ///
    /// It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of
    /// localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
    let title: String?

    /// The HTTP status code ([RFC7231], Section 6) generated by the origin server for this
    /// occurrence of the problem.
    let status: HTTPResponse.Status

    /// A human-readable explanation specific to this occurrence of the problem.
    let detail: String?

    /// A URI reference that identifies the specific occurrence of the problem.
    ///
    /// It may or may not yield further information if dereferenced.
    let instance: String?

    init(
        type: String? = nil,
        title: String? = nil,
        status: HTTPResponse.Status,
        detail: String? = nil,
        instance: String? = nil
    ) {
        self.type = type
        self.title = title
        self.status = status
        self.detail = detail
        self.instance = instance
    }

    struct CodableFormat: Codable {
        let type: String?
        let title: String?
        let status: Int
        let detail: String?
        let instance: String?
    }

    func response(
        from request: HummingbirdCore.Request,
        context: some Hummingbird.RequestContext
    ) throws -> HummingbirdCore.Response {
        let codable = CodableFormat(
            type: self.type,
            title: self.title,
            status: self.status.code,
            detail: self.detail,
            instance: self.instance
        )
        var response = try context.responseEncoder.encode(codable, from: request, context: context)

        response.status = self.status
        response.headers[.contentVersion] = "1"
        response.headers[.contentType] = "application/problem+json"
        response.headers[.contentLanguage] = "en"

        return response
    }

}
