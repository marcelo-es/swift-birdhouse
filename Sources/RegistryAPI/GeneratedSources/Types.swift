// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
package protocol APIProtocol: Sendable {
    /// List package releases
    ///
    /// - Remark: HTTP `GET /{scope}/{name}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/get(listPackageReleases)`.
    func listPackageReleases(_ input: Operations.listPackageReleases.Input) async throws -> Operations.listPackageReleases.Output
    /// Fetch release metadata
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/get(fetchReleaseMetadata)`.
    func fetchReleaseMetadata(_ input: Operations.fetchReleaseMetadata.Input) async throws -> Operations.fetchReleaseMetadata.Output
    /// Publish package release
    ///
    /// - Remark: HTTP `PUT /{scope}/{name}/{version}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/put(publishPackageRelease)`.
    func publishPackageRelease(_ input: Operations.publishPackageRelease.Input) async throws -> Operations.publishPackageRelease.Output
    /// Fetch manifest for a package release
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}/Package.swift`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/Package.swift/get(fetchManifestForPackageRelease)`.
    func fetchManifestForPackageRelease(_ input: Operations.fetchManifestForPackageRelease.Input) async throws -> Operations.fetchManifestForPackageRelease.Output
    /// Download source archive
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}.zip`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}.zip/get(downloadSourceArchive)`.
    func downloadSourceArchive(_ input: Operations.downloadSourceArchive.Input) async throws -> Operations.downloadSourceArchive.Output
    /// Lookup package identifiers registered for a URL
    ///
    /// - Remark: HTTP `GET /identifiers`.
    /// - Remark: Generated from `#/paths//identifiers/get(lookupPackageIdentifiersByURL)`.
    func lookupPackageIdentifiersByURL(_ input: Operations.lookupPackageIdentifiersByURL.Input) async throws -> Operations.lookupPackageIdentifiersByURL.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List package releases
    ///
    /// - Remark: HTTP `GET /{scope}/{name}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/get(listPackageReleases)`.
    package func listPackageReleases(
        path: Operations.listPackageReleases.Input.Path,
        headers: Operations.listPackageReleases.Input.Headers = .init()
    ) async throws -> Operations.listPackageReleases.Output {
        try await listPackageReleases(Operations.listPackageReleases.Input(
            path: path,
            headers: headers
        ))
    }
    /// Fetch release metadata
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/get(fetchReleaseMetadata)`.
    package func fetchReleaseMetadata(
        path: Operations.fetchReleaseMetadata.Input.Path,
        headers: Operations.fetchReleaseMetadata.Input.Headers = .init()
    ) async throws -> Operations.fetchReleaseMetadata.Output {
        try await fetchReleaseMetadata(Operations.fetchReleaseMetadata.Input(
            path: path,
            headers: headers
        ))
    }
    /// Publish package release
    ///
    /// - Remark: HTTP `PUT /{scope}/{name}/{version}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/put(publishPackageRelease)`.
    package func publishPackageRelease(
        path: Operations.publishPackageRelease.Input.Path,
        headers: Operations.publishPackageRelease.Input.Headers = .init()
    ) async throws -> Operations.publishPackageRelease.Output {
        try await publishPackageRelease(Operations.publishPackageRelease.Input(
            path: path,
            headers: headers
        ))
    }
    /// Fetch manifest for a package release
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}/Package.swift`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/Package.swift/get(fetchManifestForPackageRelease)`.
    package func fetchManifestForPackageRelease(
        path: Operations.fetchManifestForPackageRelease.Input.Path,
        query: Operations.fetchManifestForPackageRelease.Input.Query = .init(),
        headers: Operations.fetchManifestForPackageRelease.Input.Headers = .init()
    ) async throws -> Operations.fetchManifestForPackageRelease.Output {
        try await fetchManifestForPackageRelease(Operations.fetchManifestForPackageRelease.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Download source archive
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}.zip`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}.zip/get(downloadSourceArchive)`.
    package func downloadSourceArchive(
        path: Operations.downloadSourceArchive.Input.Path,
        headers: Operations.downloadSourceArchive.Input.Headers = .init()
    ) async throws -> Operations.downloadSourceArchive.Output {
        try await downloadSourceArchive(Operations.downloadSourceArchive.Input(
            path: path,
            headers: headers
        ))
    }
    /// Lookup package identifiers registered for a URL
    ///
    /// - Remark: HTTP `GET /identifiers`.
    /// - Remark: Generated from `#/paths//identifiers/get(lookupPackageIdentifiersByURL)`.
    package func lookupPackageIdentifiersByURL(
        query: Operations.lookupPackageIdentifiersByURL.Input.Query,
        headers: Operations.lookupPackageIdentifiersByURL.Input.Headers = .init()
    ) async throws -> Operations.lookupPackageIdentifiersByURL.Output {
        try await lookupPackageIdentifiersByURL(Operations.lookupPackageIdentifiersByURL.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
package enum Servers {
    package static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://packages.swift.org",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
package enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    package enum Schemas {
        /// - Remark: Generated from `#/components/schemas/releases`.
        package struct releases: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/releases/releases`.
            package var releases: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `releases`.
            ///
            /// - Parameters:
            ///   - releases:
            package init(releases: OpenAPIRuntime.OpenAPIObjectContainer) {
                self.releases = releases
            }
            package enum CodingKeys: String, CodingKey {
                case releases
            }
        }
        /// - Remark: Generated from `#/components/schemas/identifiers`.
        package struct identifiers: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/identifiers/identifiers`.
            package var identifiers: [Swift.String]
            /// Creates a new `identifiers`.
            ///
            /// - Parameters:
            ///   - identifiers:
            package init(identifiers: [Swift.String]) {
                self.identifiers = identifiers
            }
            package enum CodingKeys: String, CodingKey {
                case identifiers
            }
        }
        /// - Remark: Generated from `#/components/schemas/problem`.
        package struct problem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/problem/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/problem/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/problem/status`.
            package var status: Swift.Double
            /// - Remark: Generated from `#/components/schemas/problem/instance`.
            package var instance: Swift.String
            /// - Remark: Generated from `#/components/schemas/problem/detail`.
            package var detail: Swift.String
            /// Creates a new `problem`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - title:
            ///   - status:
            ///   - instance:
            ///   - detail:
            package init(
                _type: Swift.String,
                title: Swift.String,
                status: Swift.Double,
                instance: Swift.String,
                detail: Swift.String
            ) {
                self._type = _type
                self.title = title
                self.status = status
                self.instance = instance
                self.detail = detail
            }
            package enum CodingKeys: String, CodingKey {
                case _type = "type"
                case title
                case status
                case instance
                case detail
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    package enum Parameters {
        /// - Remark: Generated from `#/components/parameters/scope`.
        package typealias scope = Swift.String
        /// - Remark: Generated from `#/components/parameters/name`.
        package typealias name = Swift.String
        /// - Remark: Generated from `#/components/parameters/version`.
        package typealias version = Swift.String
        /// - Remark: Generated from `#/components/parameters/swift_version`.
        package typealias swift_version = Swift.String
        /// - Remark: Generated from `#/components/parameters/url`.
        package typealias url = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    package enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    package enum Responses {
        package struct problemDetails: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/problemDetails/headers`.
            package struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/components/headers/contentVersion`.
                @frozen package enum contentVersion: String, Codable, Hashable, Sendable {
                    case _1 = "1"
                }
                /// - Remark: Generated from `#/components/responses/problemDetails/headers/Content-Version`.
                package var Content_hyphen_Version: Components.Headers.contentVersion
                /// - Remark: Generated from `#/components/responses/problemDetails/headers/Content-Language`.
                package var Content_hyphen_Language: Swift.String?
                /// - Remark: Generated from `#/components/responses/problemDetails/headers/Content-Length`.
                package var Content_hyphen_Length: Swift.Int?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Content_hyphen_Version:
                ///   - Content_hyphen_Language:
                ///   - Content_hyphen_Length:
                package init(
                    Content_hyphen_Version: Components.Headers.contentVersion,
                    Content_hyphen_Language: Swift.String? = nil,
                    Content_hyphen_Length: Swift.Int? = nil
                ) {
                    self.Content_hyphen_Version = Content_hyphen_Version
                    self.Content_hyphen_Language = Content_hyphen_Language
                    self.Content_hyphen_Length = Content_hyphen_Length
                }
            }
            /// Received HTTP response headers
            package var headers: Components.Responses.problemDetails.Headers
            /// - Remark: Generated from `#/components/responses/problemDetails/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/problemDetails/content/application\/problem+json`.
                case application_problem_plus_json(Components.Schemas.problem)
                /// The associated value of the enum case if `self` is `.application_problem_plus_json`.
                ///
                /// - Throws: An error if `self` is not `.application_problem_plus_json`.
                /// - SeeAlso: `.application_problem_plus_json`.
                package var application_problem_plus_json: Components.Schemas.problem {
                    get throws {
                        switch self {
                        case let .application_problem_plus_json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.problemDetails.Body
            /// Creates a new `problemDetails`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            package init(
                headers: Components.Responses.problemDetails.Headers,
                body: Components.Responses.problemDetails.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        package struct redirect: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/redirect/headers`.
            package struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/components/headers/contentVersion`.
                @frozen package enum contentVersion: String, Codable, Hashable, Sendable {
                    case _1 = "1"
                }
                /// - Remark: Generated from `#/components/responses/redirect/headers/Content-Version`.
                package var Content_hyphen_Version: Components.Headers.contentVersion
                /// - Remark: Generated from `#/components/responses/redirect/headers/Location`.
                package var Location: Swift.String?
                /// - Remark: Generated from `#/components/responses/redirect/headers/Digest`.
                package var Digest: Swift.String?
                /// - Remark: Generated from `#/components/responses/redirect/headers/Content-Length`.
                package var Content_hyphen_Length: Swift.Int?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Content_hyphen_Version:
                ///   - Location:
                ///   - Digest:
                ///   - Content_hyphen_Length:
                package init(
                    Content_hyphen_Version: Components.Headers.contentVersion,
                    Location: Swift.String? = nil,
                    Digest: Swift.String? = nil,
                    Content_hyphen_Length: Swift.Int? = nil
                ) {
                    self.Content_hyphen_Version = Content_hyphen_Version
                    self.Location = Location
                    self.Digest = Digest
                    self.Content_hyphen_Length = Content_hyphen_Length
                }
            }
            /// Received HTTP response headers
            package var headers: Components.Responses.redirect.Headers
            /// Creates a new `redirect`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            package init(headers: Components.Responses.redirect.Headers) {
                self.headers = headers
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    package enum Headers {
        /// - Remark: Generated from `#/components/headers/contentVersion`.
        @frozen package enum contentVersion: String, Codable, Hashable, Sendable {
            case _1 = "1"
        }
        /// - Remark: Generated from `#/components/headers/optionalContentVersion`.
        @frozen package enum optionalContentVersion: String, Codable, Hashable, Sendable {
            case _1 = "1"
        }
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
package enum Operations {
    /// List package releases
    ///
    /// - Remark: HTTP `GET /{scope}/{name}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/get(listPackageReleases)`.
    package enum listPackageReleases {
        package static let id: Swift.String = "listPackageReleases"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/{scope}/{name}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/GET/path/scope`.
                package var scope: Components.Parameters.scope
                /// - Remark: Generated from `#/paths/{scope}/{name}/GET/path/name`.
                package var name: Components.Parameters.name
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - scope:
                ///   - name:
                package init(
                    scope: Components.Parameters.scope,
                    name: Components.Parameters.name
                ) {
                    self.scope = scope
                    self.name = name
                }
            }
            package var path: Operations.listPackageReleases.Input.Path
            /// - Remark: Generated from `#/paths/{scope}/{name}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listPackageReleases.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.listPackageReleases.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.listPackageReleases.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.listPackageReleases.Input.Path,
                headers: Operations.listPackageReleases.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/contentVersion`.
                    @frozen package enum contentVersion: String, Codable, Hashable, Sendable {
                        case _1 = "1"
                    }
                    /// - Remark: Generated from `#/paths/{scope}/{name}/GET/responses/200/headers/Content-Version`.
                    package var Content_hyphen_Version: Components.Headers.contentVersion
                    /// - Remark: Generated from `#/paths/{scope}/{name}/GET/responses/200/headers/Content-Length`.
                    package var Content_hyphen_Length: Swift.Int?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Content_hyphen_Version:
                    ///   - Content_hyphen_Length:
                    package init(
                        Content_hyphen_Version: Components.Headers.contentVersion,
                        Content_hyphen_Length: Swift.Int? = nil
                    ) {
                        self.Content_hyphen_Version = Content_hyphen_Version
                        self.Content_hyphen_Length = Content_hyphen_Length
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.listPackageReleases.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/{scope}/{name}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/{scope}/{name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.releases)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.releases {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.listPackageReleases.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.listPackageReleases.Output.Ok.Headers,
                    body: Operations.listPackageReleases.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/get(listPackageReleases)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listPackageReleases.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.listPackageReleases.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// A client error.
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/get(listPackageReleases)/responses/4XX`.
            ///
            /// HTTP response code: `400...499 clientError`.
            case clientError(statusCode: Swift.Int, Components.Responses.problemDetails)
            /// The associated value of the enum case if `self` is `.clientError`.
            ///
            /// - Throws: An error if `self` is not `.clientError`.
            /// - SeeAlso: `.clientError`.
            package var clientError: Components.Responses.problemDetails {
                get throws {
                    switch self {
                    case let .clientError(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "clientError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_problem_plus_json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Fetch release metadata
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/get(fetchReleaseMetadata)`.
    package enum fetchReleaseMetadata {
        package static let id: Swift.String = "fetchReleaseMetadata"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/path/scope`.
                package var scope: Components.Parameters.scope
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/path/name`.
                package var name: Components.Parameters.name
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/path/version`.
                package var version: Components.Parameters.version
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - scope:
                ///   - name:
                ///   - version:
                package init(
                    scope: Components.Parameters.scope,
                    name: Components.Parameters.name,
                    version: Components.Parameters.version
                ) {
                    self.scope = scope
                    self.name = name
                    self.version = version
                }
            }
            package var path: Operations.fetchReleaseMetadata.Input.Path
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchReleaseMetadata.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchReleaseMetadata.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.fetchReleaseMetadata.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.fetchReleaseMetadata.Input.Path,
                headers: Operations.fetchReleaseMetadata.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/contentVersion`.
                    @frozen package enum contentVersion: String, Codable, Hashable, Sendable {
                        case _1 = "1"
                    }
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/responses/200/headers/Content-Version`.
                    package var Content_hyphen_Version: Components.Headers.contentVersion
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/responses/200/headers/Content-Length`.
                    package var Content_hyphen_Length: Swift.Int?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Content_hyphen_Version:
                    ///   - Content_hyphen_Length:
                    package init(
                        Content_hyphen_Version: Components.Headers.contentVersion,
                        Content_hyphen_Length: Swift.Int? = nil
                    ) {
                        self.Content_hyphen_Version = Content_hyphen_Version
                        self.Content_hyphen_Length = Content_hyphen_Length
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.fetchReleaseMetadata.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/GET/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.fetchReleaseMetadata.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.fetchReleaseMetadata.Output.Ok.Headers,
                    body: Operations.fetchReleaseMetadata.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/get(fetchReleaseMetadata)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchReleaseMetadata.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.fetchReleaseMetadata.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// A client error.
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/get(fetchReleaseMetadata)/responses/4XX`.
            ///
            /// HTTP response code: `400...499 clientError`.
            case clientError(statusCode: Swift.Int, Components.Responses.problemDetails)
            /// The associated value of the enum case if `self` is `.clientError`.
            ///
            /// - Throws: An error if `self` is not `.clientError`.
            /// - SeeAlso: `.clientError`.
            package var clientError: Components.Responses.problemDetails {
                get throws {
                    switch self {
                    case let .clientError(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "clientError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_problem_plus_json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Publish package release
    ///
    /// - Remark: HTTP `PUT /{scope}/{name}/{version}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/put(publishPackageRelease)`.
    package enum publishPackageRelease {
        package static let id: Swift.String = "publishPackageRelease"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/path`.
            package struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/path/scope`.
                package var scope: Components.Parameters.scope
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/path/name`.
                package var name: Components.Parameters.name
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/path/version`.
                package var version: Components.Parameters.version
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - scope:
                ///   - name:
                ///   - version:
                package init(
                    scope: Components.Parameters.scope,
                    name: Components.Parameters.name,
                    version: Components.Parameters.version
                ) {
                    self.scope = scope
                    self.name = name
                    self.version = version
                }
            }
            package var path: Operations.publishPackageRelease.Input.Path
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.publishPackageRelease.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.publishPackageRelease.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.publishPackageRelease.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.publishPackageRelease.Input.Path,
                headers: Operations.publishPackageRelease.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct `Continue`: Sendable, Hashable {
                /// Creates a new ``Continue``.
                package init() {}
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/put(publishPackageRelease)/responses/100`.
            ///
            /// HTTP response code: `100 `continue``.
            case `continue`(Operations.publishPackageRelease.Output.`Continue`)
            /// The associated value of the enum case if `self` is `.`continue``.
            ///
            /// - Throws: An error if `self` is not `.`continue``.
            /// - SeeAlso: `.`continue``.
            package var `continue`: Operations.publishPackageRelease.Output.`Continue` {
                get throws {
                    switch self {
                    case let .`continue`(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "`continue`",
                            response: self
                        )
                    }
                }
            }
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/contentVersion`.
                    @frozen package enum contentVersion: String, Codable, Hashable, Sendable {
                        case _1 = "1"
                    }
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/201/headers/Content-Version`.
                    package var Content_hyphen_Version: Components.Headers.contentVersion
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/201/headers/Content-Length`.
                    package var Content_hyphen_Length: Swift.Int?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Content_hyphen_Version:
                    ///   - Content_hyphen_Length:
                    package init(
                        Content_hyphen_Version: Components.Headers.contentVersion,
                        Content_hyphen_Length: Swift.Int? = nil
                    ) {
                        self.Content_hyphen_Version = Content_hyphen_Version
                        self.Content_hyphen_Length = Content_hyphen_Length
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.publishPackageRelease.Output.Created.Headers
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/201/content/application\/json`.
                    case json(Components.Schemas.releases)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.releases {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.publishPackageRelease.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.publishPackageRelease.Output.Created.Headers,
                    body: Operations.publishPackageRelease.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/put(publishPackageRelease)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.publishPackageRelease.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.publishPackageRelease.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct Accepted: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/202/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/contentVersion`.
                    @frozen package enum contentVersion: String, Codable, Hashable, Sendable {
                        case _1 = "1"
                    }
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/202/headers/Content-Version`.
                    package var Content_hyphen_Version: Components.Headers.contentVersion
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/202/headers/Location`.
                    package var Location: Swift.String?
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/PUT/responses/202/headers/Retry-After`.
                    package var Retry_hyphen_After: Swift.Int?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Content_hyphen_Version:
                    ///   - Location:
                    ///   - Retry_hyphen_After:
                    package init(
                        Content_hyphen_Version: Components.Headers.contentVersion,
                        Location: Swift.String? = nil,
                        Retry_hyphen_After: Swift.Int? = nil
                    ) {
                        self.Content_hyphen_Version = Content_hyphen_Version
                        self.Location = Location
                        self.Retry_hyphen_After = Retry_hyphen_After
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.publishPackageRelease.Output.Accepted.Headers
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                package init(headers: Operations.publishPackageRelease.Output.Accepted.Headers) {
                    self.headers = headers
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/put(publishPackageRelease)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.publishPackageRelease.Output.Accepted)
            /// The associated value of the enum case if `self` is `.accepted`.
            ///
            /// - Throws: An error if `self` is not `.accepted`.
            /// - SeeAlso: `.accepted`.
            package var accepted: Operations.publishPackageRelease.Output.Accepted {
                get throws {
                    switch self {
                    case let .accepted(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "accepted",
                            response: self
                        )
                    }
                }
            }
            /// A client error.
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/put(publishPackageRelease)/responses/4XX`.
            ///
            /// HTTP response code: `400...499 clientError`.
            case clientError(statusCode: Swift.Int, Components.Responses.problemDetails)
            /// The associated value of the enum case if `self` is `.clientError`.
            ///
            /// - Throws: An error if `self` is not `.clientError`.
            /// - SeeAlso: `.clientError`.
            package var clientError: Components.Responses.problemDetails {
                get throws {
                    switch self {
                    case let .clientError(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "clientError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_problem_plus_json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Fetch manifest for a package release
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}/Package.swift`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/Package.swift/get(fetchManifestForPackageRelease)`.
    package enum fetchManifestForPackageRelease {
        package static let id: Swift.String = "fetchManifestForPackageRelease"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/path`.
            package struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/path/scope`.
                package var scope: Components.Parameters.scope
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/path/name`.
                package var name: Components.Parameters.name
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/path/version`.
                package var version: Components.Parameters.version
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - scope:
                ///   - name:
                ///   - version:
                package init(
                    scope: Components.Parameters.scope,
                    name: Components.Parameters.name,
                    version: Components.Parameters.version
                ) {
                    self.scope = scope
                    self.name = name
                    self.version = version
                }
            }
            package var path: Operations.fetchManifestForPackageRelease.Input.Path
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/query/swift-version`.
                package var swift_hyphen_version: Components.Parameters.swift_version?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - swift_hyphen_version:
                package init(swift_hyphen_version: Components.Parameters.swift_version? = nil) {
                    self.swift_hyphen_version = swift_hyphen_version
                }
            }
            package var query: Operations.fetchManifestForPackageRelease.Input.Query
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchManifestForPackageRelease.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchManifestForPackageRelease.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.fetchManifestForPackageRelease.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.fetchManifestForPackageRelease.Input.Path,
                query: Operations.fetchManifestForPackageRelease.Input.Query = .init(),
                headers: Operations.fetchManifestForPackageRelease.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/responses/200/headers/Cache-Control`.
                    package var Cache_hyphen_Control: Swift.String?
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/responses/200/headers/Content-Disposition`.
                    package var Content_hyphen_Disposition: Swift.String?
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/responses/200/headers/Content-Length`.
                    package var Content_hyphen_Length: Swift.Int?
                    /// - Remark: Generated from `#/components/headers/optionalContentVersion`.
                    @frozen package enum optionalContentVersion: String, Codable, Hashable, Sendable {
                        case _1 = "1"
                    }
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/responses/200/headers/Content-Version`.
                    package var Content_hyphen_Version: Components.Headers.optionalContentVersion?
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/responses/200/headers/Link`.
                    package var Link: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Cache_hyphen_Control:
                    ///   - Content_hyphen_Disposition:
                    ///   - Content_hyphen_Length:
                    ///   - Content_hyphen_Version:
                    ///   - Link:
                    package init(
                        Cache_hyphen_Control: Swift.String? = nil,
                        Content_hyphen_Disposition: Swift.String? = nil,
                        Content_hyphen_Length: Swift.Int? = nil,
                        Content_hyphen_Version: Components.Headers.optionalContentVersion? = nil,
                        Link: Swift.String? = nil
                    ) {
                        self.Cache_hyphen_Control = Cache_hyphen_Control
                        self.Content_hyphen_Disposition = Content_hyphen_Disposition
                        self.Content_hyphen_Length = Content_hyphen_Length
                        self.Content_hyphen_Version = Content_hyphen_Version
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.fetchManifestForPackageRelease.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}/Package.swift/GET/responses/200/content/text\/x-swift`.
                    case text_x_hyphen_swift(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_x_hyphen_swift`.
                    ///
                    /// - Throws: An error if `self` is not `.text_x_hyphen_swift`.
                    /// - SeeAlso: `.text_x_hyphen_swift`.
                    package var text_x_hyphen_swift: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_x_hyphen_swift(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.fetchManifestForPackageRelease.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.fetchManifestForPackageRelease.Output.Ok.Headers = .init(),
                    body: Operations.fetchManifestForPackageRelease.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/Package.swift/get(fetchManifestForPackageRelease)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchManifestForPackageRelease.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.fetchManifestForPackageRelease.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// A client error.
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/Package.swift/get(fetchManifestForPackageRelease)/responses/4XX`.
            ///
            /// HTTP response code: `400...499 clientError`.
            case clientError(statusCode: Swift.Int, Components.Responses.problemDetails)
            /// The associated value of the enum case if `self` is `.clientError`.
            ///
            /// - Throws: An error if `self` is not `.clientError`.
            /// - SeeAlso: `.clientError`.
            package var clientError: Components.Responses.problemDetails {
                get throws {
                    switch self {
                    case let .clientError(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "clientError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case text_x_hyphen_swift
            case application_problem_plus_json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/x-swift":
                    self = .text_x_hyphen_swift
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .text_x_hyphen_swift:
                    return "text/x-swift"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            package static var allCases: [Self] {
                [
                    .text_x_hyphen_swift,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Download source archive
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}.zip`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}.zip/get(downloadSourceArchive)`.
    package enum downloadSourceArchive {
        package static let id: Swift.String = "downloadSourceArchive"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/path`.
            package struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/path/scope`.
                package var scope: Components.Parameters.scope
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/path/name`.
                package var name: Components.Parameters.name
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/path/version`.
                package var version: Components.Parameters.version
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - scope:
                ///   - name:
                ///   - version:
                package init(
                    scope: Components.Parameters.scope,
                    name: Components.Parameters.name,
                    version: Components.Parameters.version
                ) {
                    self.scope = scope
                    self.name = name
                    self.version = version
                }
            }
            package var path: Operations.downloadSourceArchive.Input.Path
            /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.downloadSourceArchive.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.downloadSourceArchive.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.downloadSourceArchive.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.downloadSourceArchive.Input.Path,
                headers: Operations.downloadSourceArchive.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/headers/Accept-Ranges`.
                    package var Accept_hyphen_Ranges: Swift.String?
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/headers/Cache-Control`.
                    package var Cache_hyphen_Control: Swift.String?
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/headers/Content-Disposition`.
                    package var Content_hyphen_Disposition: Swift.String?
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/headers/Content-Length`.
                    package var Content_hyphen_Length: Swift.Int?
                    /// - Remark: Generated from `#/components/headers/optionalContentVersion`.
                    @frozen package enum optionalContentVersion: String, Codable, Hashable, Sendable {
                        case _1 = "1"
                    }
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/headers/Content-Version`.
                    package var Content_hyphen_Version: Components.Headers.optionalContentVersion?
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/headers/Digest`.
                    package var Digest: Swift.String
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/headers/Link`.
                    package var Link: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Accept_hyphen_Ranges:
                    ///   - Cache_hyphen_Control:
                    ///   - Content_hyphen_Disposition:
                    ///   - Content_hyphen_Length:
                    ///   - Content_hyphen_Version:
                    ///   - Digest:
                    ///   - Link:
                    package init(
                        Accept_hyphen_Ranges: Swift.String? = nil,
                        Cache_hyphen_Control: Swift.String? = nil,
                        Content_hyphen_Disposition: Swift.String? = nil,
                        Content_hyphen_Length: Swift.Int? = nil,
                        Content_hyphen_Version: Components.Headers.optionalContentVersion? = nil,
                        Digest: Swift.String,
                        Link: Swift.String? = nil
                    ) {
                        self.Accept_hyphen_Ranges = Accept_hyphen_Ranges
                        self.Cache_hyphen_Control = Cache_hyphen_Control
                        self.Content_hyphen_Disposition = Content_hyphen_Disposition
                        self.Content_hyphen_Length = Content_hyphen_Length
                        self.Content_hyphen_Version = Content_hyphen_Version
                        self.Digest = Digest
                        self.Link = Link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.downloadSourceArchive.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/{scope}/{name}/{version}.zip/GET/responses/200/content/application\/zip`.
                    case application_zip(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_zip`.
                    ///
                    /// - Throws: An error if `self` is not `.application_zip`.
                    /// - SeeAlso: `.application_zip`.
                    package var application_zip: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_zip(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.downloadSourceArchive.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.downloadSourceArchive.Output.Ok.Headers,
                    body: Operations.downloadSourceArchive.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}.zip/get(downloadSourceArchive)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.downloadSourceArchive.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.downloadSourceArchive.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// A server redirect.
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}.zip/get(downloadSourceArchive)/responses/3XX`.
            ///
            /// HTTP response code: `300...399 redirection`.
            case redirection(statusCode: Swift.Int, Components.Responses.redirect)
            /// The associated value of the enum case if `self` is `.redirection`.
            ///
            /// - Throws: An error if `self` is not `.redirection`.
            /// - SeeAlso: `.redirection`.
            package var redirection: Components.Responses.redirect {
                get throws {
                    switch self {
                    case let .redirection(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "redirection",
                            response: self
                        )
                    }
                }
            }
            /// A client error.
            ///
            /// - Remark: Generated from `#/paths//{scope}/{name}/{version}.zip/get(downloadSourceArchive)/responses/4XX`.
            ///
            /// HTTP response code: `400...499 clientError`.
            case clientError(statusCode: Swift.Int, Components.Responses.problemDetails)
            /// The associated value of the enum case if `self` is `.clientError`.
            ///
            /// - Throws: An error if `self` is not `.clientError`.
            /// - SeeAlso: `.clientError`.
            package var clientError: Components.Responses.problemDetails {
                get throws {
                    switch self {
                    case let .clientError(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "clientError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case application_zip
            case application_problem_plus_json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/zip":
                    self = .application_zip
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .application_zip:
                    return "application/zip"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            package static var allCases: [Self] {
                [
                    .application_zip,
                    .application_problem_plus_json
                ]
            }
        }
    }
    /// Lookup package identifiers registered for a URL
    ///
    /// - Remark: HTTP `GET /identifiers`.
    /// - Remark: Generated from `#/paths//identifiers/get(lookupPackageIdentifiersByURL)`.
    package enum lookupPackageIdentifiersByURL {
        package static let id: Swift.String = "lookupPackageIdentifiersByURL"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/identifiers/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/identifiers/GET/query/url`.
                package var url: Components.Parameters.url
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - url:
                package init(url: Components.Parameters.url) {
                    self.url = url
                }
            }
            package var query: Operations.lookupPackageIdentifiersByURL.Input.Query
            /// - Remark: Generated from `#/paths/identifiers/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupPackageIdentifiersByURL.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.lookupPackageIdentifiersByURL.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.lookupPackageIdentifiersByURL.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            package init(
                query: Operations.lookupPackageIdentifiersByURL.Input.Query,
                headers: Operations.lookupPackageIdentifiersByURL.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/identifiers/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/components/headers/contentVersion`.
                    @frozen package enum contentVersion: String, Codable, Hashable, Sendable {
                        case _1 = "1"
                    }
                    /// - Remark: Generated from `#/paths/identifiers/GET/responses/200/headers/Content-Version`.
                    package var Content_hyphen_Version: Components.Headers.contentVersion
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Content_hyphen_Version:
                    package init(Content_hyphen_Version: Components.Headers.contentVersion) {
                        self.Content_hyphen_Version = Content_hyphen_Version
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.lookupPackageIdentifiersByURL.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/identifiers/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/identifiers/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.identifiers)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.identifiers {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.lookupPackageIdentifiersByURL.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.lookupPackageIdentifiersByURL.Output.Ok.Headers,
                    body: Operations.lookupPackageIdentifiersByURL.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            ///
            ///
            /// - Remark: Generated from `#/paths//identifiers/get(lookupPackageIdentifiersByURL)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.lookupPackageIdentifiersByURL.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.lookupPackageIdentifiersByURL.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// A client error.
            ///
            /// - Remark: Generated from `#/paths//identifiers/get(lookupPackageIdentifiersByURL)/responses/4XX`.
            ///
            /// HTTP response code: `400...499 clientError`.
            case clientError(statusCode: Swift.Int, Components.Responses.problemDetails)
            /// The associated value of the enum case if `self` is `.clientError`.
            ///
            /// - Throws: An error if `self` is not `.clientError`.
            /// - SeeAlso: `.clientError`.
            package var clientError: Components.Responses.problemDetails {
                get throws {
                    switch self {
                    case let .clientError(_, response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "clientError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_problem_plus_json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .application_problem_plus_json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_problem_plus_json:
                    return "application/problem+json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .application_problem_plus_json
                ]
            }
        }
    }
}
