// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
extension APIProtocol {
    /// Registers each operation handler with the provided transport.
    /// - Parameters:
    ///   - transport: A transport to which to register the operation handlers.
    ///   - serverURL: A URL used to determine the path prefix for registered
    ///   request handlers.
    ///   - configuration: A set of configuration values for the server.
    ///   - middlewares: A list of middlewares to call before the handler.
    package func registerHandlers(
        on transport: any ServerTransport,
        serverURL: Foundation.URL = .defaultOpenAPIServerURL,
        configuration: Configuration = .init(),
        middlewares: [any ServerMiddleware] = []
    ) throws {
        let server = UniversalServer(
            serverURL: serverURL,
            handler: self,
            configuration: configuration,
            middlewares: middlewares
        )
        try transport.register(
            {
                try await server.listPackageReleases(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/{scope}/{name}")
        )
        try transport.register(
            {
                try await server.fetchReleaseMetadata(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/{scope}/{name}/{version}")
        )
        try transport.register(
            {
                try await server.publishPackageRelease(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .put,
            path: server.apiPathComponentsWithServerPrefix("/{scope}/{name}/{version}")
        )
        try transport.register(
            {
                try await server.fetchManifestForPackageRelease(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/{scope}/{name}/{version}/Package.swift")
        )
        try transport.register(
            {
                try await server.downloadSourceArchive(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/{scope}/{name}/{version}.zip")
        )
        try transport.register(
            {
                try await server.lookupPackageIdentifiersByURL(
                    request: $0,
                    body: $1,
                    metadata: $2
                )
            },
            method: .get,
            path: server.apiPathComponentsWithServerPrefix("/identifiers")
        )
    }
}

fileprivate extension UniversalServer where APIHandler: APIProtocol {
    /// List package releases
    ///
    /// - Remark: HTTP `GET /{scope}/{name}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/get(listPackageReleases)`.
    func listPackageReleases(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.listPackageReleases.id,
            using: {
                APIHandler.listPackageReleases($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.listPackageReleases.Input.Path = .init(
                    scope: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "scope",
                        as: Components.Parameters.scope.self
                    ),
                    name: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "name",
                        as: Components.Parameters.name.self
                    )
                )
                let headers: Operations.listPackageReleases.Input.Headers = .init(accept: try converter.extractAcceptHeaderIfPresent(in: request.headerFields))
                return Operations.listPackageReleases.Input(
                    path: path,
                    headers: headers
                )
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .json(value):
                        try converter.validateAcceptIfPresent(
                            "application/json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .clientError(statusCode, value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: statusCode)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Language",
                        value: value.headers.Content_hyphen_Language
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .application_problem_plus_json(value):
                        try converter.validateAcceptIfPresent(
                            "application/problem+json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/problem+json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Fetch release metadata
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/get(fetchReleaseMetadata)`.
    func fetchReleaseMetadata(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.fetchReleaseMetadata.id,
            using: {
                APIHandler.fetchReleaseMetadata($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.fetchReleaseMetadata.Input.Path = .init(
                    scope: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "scope",
                        as: Components.Parameters.scope.self
                    ),
                    name: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "name",
                        as: Components.Parameters.name.self
                    ),
                    version: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "version",
                        as: Components.Parameters.version.self
                    )
                )
                let headers: Operations.fetchReleaseMetadata.Input.Headers = .init(accept: try converter.extractAcceptHeaderIfPresent(in: request.headerFields))
                return Operations.fetchReleaseMetadata.Input(
                    path: path,
                    headers: headers
                )
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .json(value):
                        try converter.validateAcceptIfPresent(
                            "application/json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .clientError(statusCode, value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: statusCode)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Language",
                        value: value.headers.Content_hyphen_Language
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .application_problem_plus_json(value):
                        try converter.validateAcceptIfPresent(
                            "application/problem+json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/problem+json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Publish package release
    ///
    /// - Remark: HTTP `PUT /{scope}/{name}/{version}`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/put(publishPackageRelease)`.
    func publishPackageRelease(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.publishPackageRelease.id,
            using: {
                APIHandler.publishPackageRelease($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.publishPackageRelease.Input.Path = .init(
                    scope: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "scope",
                        as: Components.Parameters.scope.self
                    ),
                    name: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "name",
                        as: Components.Parameters.name.self
                    ),
                    version: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "version",
                        as: Components.Parameters.version.self
                    )
                )
                let headers: Operations.publishPackageRelease.Input.Headers = .init(accept: try converter.extractAcceptHeaderIfPresent(in: request.headerFields))
                return Operations.publishPackageRelease.Input(
                    path: path,
                    headers: headers
                )
            },
            serializer: { output, request in
                switch output {
                case let .`continue`(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 100)
                    suppressMutabilityWarning(&response)
                    return (response, nil)
                case let .created(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 201)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .json(value):
                        try converter.validateAcceptIfPresent(
                            "application/json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .accepted(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 202)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Location",
                        value: value.headers.Location
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Retry-After",
                        value: value.headers.Retry_hyphen_After
                    )
                    return (response, nil)
                case let .clientError(statusCode, value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: statusCode)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Language",
                        value: value.headers.Content_hyphen_Language
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .application_problem_plus_json(value):
                        try converter.validateAcceptIfPresent(
                            "application/problem+json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/problem+json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Fetch manifest for a package release
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}/Package.swift`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}/Package.swift/get(fetchManifestForPackageRelease)`.
    func fetchManifestForPackageRelease(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.fetchManifestForPackageRelease.id,
            using: {
                APIHandler.fetchManifestForPackageRelease($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.fetchManifestForPackageRelease.Input.Path = .init(
                    scope: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "scope",
                        as: Components.Parameters.scope.self
                    ),
                    name: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "name",
                        as: Components.Parameters.name.self
                    ),
                    version: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "version",
                        as: Components.Parameters.version.self
                    )
                )
                let query: Operations.fetchManifestForPackageRelease.Input.Query = .init(swift_hyphen_version: try converter.getOptionalQueryItemAsURI(
                    in: request.soar_query,
                    style: .form,
                    explode: true,
                    name: "swift-version",
                    as: Components.Parameters.swift_version.self
                ))
                let headers: Operations.fetchManifestForPackageRelease.Input.Headers = .init(accept: try converter.extractAcceptHeaderIfPresent(in: request.headerFields))
                return Operations.fetchManifestForPackageRelease.Input(
                    path: path,
                    query: query,
                    headers: headers
                )
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Cache-Control",
                        value: value.headers.Cache_hyphen_Control
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Disposition",
                        value: value.headers.Content_hyphen_Disposition
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Link",
                        value: value.headers.Link
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .text_x_hyphen_swift(value):
                        try converter.validateAcceptIfPresent(
                            "text/x-swift",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsBinary(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "text/x-swift"
                        )
                    }
                    return (response, body)
                case let .clientError(statusCode, value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: statusCode)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Language",
                        value: value.headers.Content_hyphen_Language
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .application_problem_plus_json(value):
                        try converter.validateAcceptIfPresent(
                            "application/problem+json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/problem+json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Download source archive
    ///
    /// - Remark: HTTP `GET /{scope}/{name}/{version}.zip`.
    /// - Remark: Generated from `#/paths//{scope}/{name}/{version}.zip/get(downloadSourceArchive)`.
    func downloadSourceArchive(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.downloadSourceArchive.id,
            using: {
                APIHandler.downloadSourceArchive($0)
            },
            deserializer: { request, requestBody, metadata in
                let path: Operations.downloadSourceArchive.Input.Path = .init(
                    scope: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "scope",
                        as: Components.Parameters.scope.self
                    ),
                    name: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "name",
                        as: Components.Parameters.name.self
                    ),
                    version: try converter.getPathParameterAsURI(
                        in: metadata.pathParameters,
                        name: "version",
                        as: Components.Parameters.version.self
                    )
                )
                let headers: Operations.downloadSourceArchive.Input.Headers = .init(accept: try converter.extractAcceptHeaderIfPresent(in: request.headerFields))
                return Operations.downloadSourceArchive.Input(
                    path: path,
                    headers: headers
                )
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Accept-Ranges",
                        value: value.headers.Accept_hyphen_Ranges
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Cache-Control",
                        value: value.headers.Cache_hyphen_Control
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Disposition",
                        value: value.headers.Content_hyphen_Disposition
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Digest",
                        value: value.headers.Digest
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Link",
                        value: value.headers.Link
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .application_zip(value):
                        try converter.validateAcceptIfPresent(
                            "application/zip",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsBinary(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/zip"
                        )
                    }
                    return (response, body)
                case let .redirection(statusCode, value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: statusCode)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Location",
                        value: value.headers.Location
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Digest",
                        value: value.headers.Digest
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    return (response, nil)
                case let .clientError(statusCode, value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: statusCode)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Language",
                        value: value.headers.Content_hyphen_Language
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .application_problem_plus_json(value):
                        try converter.validateAcceptIfPresent(
                            "application/problem+json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/problem+json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
    /// Lookup package identifiers registered for a URL
    ///
    /// - Remark: HTTP `GET /identifiers`.
    /// - Remark: Generated from `#/paths//identifiers/get(lookupPackageIdentifiersByURL)`.
    func lookupPackageIdentifiersByURL(
        request: HTTPTypes.HTTPRequest,
        body: OpenAPIRuntime.HTTPBody?,
        metadata: OpenAPIRuntime.ServerRequestMetadata
    ) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        try await handle(
            request: request,
            requestBody: body,
            metadata: metadata,
            forOperation: Operations.lookupPackageIdentifiersByURL.id,
            using: {
                APIHandler.lookupPackageIdentifiersByURL($0)
            },
            deserializer: { request, requestBody, metadata in
                let query: Operations.lookupPackageIdentifiersByURL.Input.Query = .init(url: try converter.getRequiredQueryItemAsURI(
                    in: request.soar_query,
                    style: .form,
                    explode: true,
                    name: "url",
                    as: Components.Parameters.url.self
                ))
                let headers: Operations.lookupPackageIdentifiersByURL.Input.Headers = .init(accept: try converter.extractAcceptHeaderIfPresent(in: request.headerFields))
                return Operations.lookupPackageIdentifiersByURL.Input(
                    query: query,
                    headers: headers
                )
            },
            serializer: { output, request in
                switch output {
                case let .ok(value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: 200)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .json(value):
                        try converter.validateAcceptIfPresent(
                            "application/json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .clientError(statusCode, value):
                    suppressUnusedWarning(value)
                    var response = HTTPTypes.HTTPResponse(soar_statusCode: statusCode)
                    suppressMutabilityWarning(&response)
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Version",
                        value: value.headers.Content_hyphen_Version
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Language",
                        value: value.headers.Content_hyphen_Language
                    )
                    try converter.setHeaderFieldAsURI(
                        in: &response.headerFields,
                        name: "Content-Length",
                        value: value.headers.Content_hyphen_Length
                    )
                    let body: OpenAPIRuntime.HTTPBody
                    switch value.body {
                    case let .application_problem_plus_json(value):
                        try converter.validateAcceptIfPresent(
                            "application/problem+json",
                            in: request.headerFields
                        )
                        body = try converter.setResponseBodyAsJSON(
                            value,
                            headerFields: &response.headerFields,
                            contentType: "application/problem+json; charset=utf-8"
                        )
                    }
                    return (response, body)
                case let .undocumented(statusCode, _):
                    return (.init(soar_statusCode: statusCode), nil)
                }
            }
        )
    }
}
